import { Call, CallServiceType } from "../callService";
declare class SipClient {
    private sipUA;
    private callService;
    private sessionMap;
    private iceTimeOutId;
    private configurationParams;
    private platform;
    private pushToken;
    private regFlag;
    private regFailedFlag;
    isRegistered: boolean;
    constructor(callService: CallServiceType);
    registerClient(): Promise<void>;
    updateCredentials(): Promise<void>;
    tokenRegistration(): Promise<void>;
    registerPushToken(pushToken: string, platform: "a" | "i"): Promise<void>;
    init(): void;
    registerEventsListeners(): void;
    destroy(): void;
    removeCredentials(): void;
    handleRegistration(e: any): void;
    handleRegistrationFailed(e: any): Promise<void>;
    handleUnRegistration(e: any): void;
    handleNewRTCSession(sessionEvent: any): void;
    registerRTCSessionListeners(session: any): void;
    handleFailedRTCSession(e: any): void;
    handleEndedRTCSession(e: any): void;
    handleConfirmedRTCSession(e: any): void;
    handleIceCandidateRTCSession(e: any): void;
    handlePeerConnectionRTCSession(e: any): void;
    handleProgressRTCSession(e: any): void;
    handleAcceptedRTCSession(e: any): void;
    handleSendingRTCSession(e: any): void;
    handleSdpRTCSession(e: any): void;
    answerCall(sessionId: string): void;
    removeSession(sessionId: string): void;
    endCall(sessionId: string): void;
    startCall(handle: string): any;
    holdCall(sessionId: string, isHeld: boolean): void;
    muteCall(sessionId: string, isMuted: boolean): void;
    attendedTransferCall(originCall: Call, targetCall: Call): void;
    blindTransferCall(sessionId: string, handle: string): void;
    sendDTMF(sessionId: string, dtmf: string): void;
}
export default SipClient;
