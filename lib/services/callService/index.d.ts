import CallStore from "./callStore";
import { AppStateStatus } from "react-native";
import { EventEmitter } from 'eventemitter3';
export declare const HELD = "held";
export declare const CALL_PROGRESS = "call_progress";
export declare const CONNECTING = "connecting";
export declare const RINGING = "ringing";
export declare const ESTABLISHED = "established";
export type AudioRoute = 'PHONE' | 'SPEAKER' | 'HEADSET' | 'BLUETOOTH';
export interface Call {
    sessionId: string;
    callUUID: string;
    name: string;
    handle: string;
    isMuted: boolean;
    callStatus: CallStatus;
    isHeld: boolean;
    callDirection: 'incoming' | 'outgoing';
    callType: 'audio' | 'video';
    timeStarted: number | null;
    audioRoute: AudioRoute;
    endReason?: string;
}
export interface PendingCall {
    callUUID: string;
    handle: string;
    name: string;
    isAnswered: boolean;
}
export type CallServiceType = typeof callServiceInstance;
export type CallStatus = 'connecting' | 'ringing' | 'established' | 'ended' | 'peerConnection';
declare class CallService extends EventEmitter {
    canCall: boolean;
    private nativePhone;
    private sipClient;
    private notificationService;
    callStore: CallStore;
    callConnectingUUID: string | undefined;
    private pendingCall;
    private pendingCallTimeout;
    private pendingOutgoingCall;
    private pendingOutgoingCallTimeout;
    private focusedCallUUID;
    appState: AppStateStatus;
    sipServiceInitFailed: boolean;
    callServiceDeviceId: string | undefined;
    constructor();
    init(token: string): Promise<void>;
    updateToken(token: string): Promise<void>;
    saveToken(token: string): Promise<boolean>;
    registerPushToken(pushToken: string, platform: "a" | "i"): void;
    initiateCallService(): Promise<void>;
    appStateListener(): void;
    stopCallService(): void;
    removeSipCredentials(): void;
    setCallServiceDeviceId(deviceId: string): void;
    callScreenDisplayed(callUUID: string, handle: string, name: string): void;
    onSipClientReady(): void;
    onSipClientFailed(): void;
    makeSureUUIDisUUID4(uuid: string): string;
    onIncomingSipCall(sessionEvent: any): void;
    onSipCallFailed(sessionEvent: any): void;
    onSipCallEnded(sessionEvent: any): void;
    onSipCallConfirmed(session: any): void;
    onSipCallAccepted(sessionEvent: any): void;
    onSipCallProgress(session: any): void;
    onIncomingFcmCall(callUUID: string, handle: string, name: string): void;
    onSipLocalSessionCreated(): void;
    startedCall(handle: string, callUUID: string, name?: string): void;
    makeCall(handle: string, name?: string): void;
    answeredCall(callUUID: string): void;
    terminateCall(): void;
    endCallByUUID(callUUID: string): void;
    preLaunchAnswerCall(callUUID: string): void;
    muteCall(): void;
    onCallMuted(isMuted: boolean, callUUID: string): void;
    toggleHoldCall(): void;
    onCallHeld(callUUID: string, isHeld: boolean): void;
    swapCall(): void;
    attendedTransferCall(originCall: Call, targetCall: Call): void;
    blindTransferCall(targetNumber: string): void;
    sendDTMF(digits: string, callUUID?: string): void;
    changeAudioRoute(output: string, callUUID?: string): void;
    resetIncomingCallProps(): void;
    callCleanUp(): void;
    holdOtherCalls(sessionId: string): void;
    getAudioRoutes(): Promise<void>;
    setAudioRoute(route: string): Promise<void>;
    updateCallInfo(callUUID: string, info: string): void;
}
declare const callServiceInstance: CallService;
export default callServiceInstance;
